Title:			Setup instructions for using Google Gemini and OpenAI APIs
Project:			UTECA Interpretacion y Traduccion 	
Author:			bmarron
Origin Date:		22 Sept 2025
Revision Date:		02 Oct 2025


%%%%%%%%%%%%%%%%%%	Using Google Gemini and OpenAI APIs %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#########################
Setup Instructions for
using Google Gemini
	Current SDK ==>  google-genai
##########################

----- Google Gemini API Info and Getting Started ---------------------------
1. See the QuickStart guide here,
	- https://ai.google.dev/gemini-api/docs/quickstart?lang=python

2. Go to the Google API Studio Welcome page
	- https://aistudio.google.com/welcome
		-- clic on "Get Started"
		-- Enter a Google Account
		-- opens Google AI Studio page
	
---- Get a Gemini API Key ----------------
*	Secuirty for your API key
	1. Open 
		https://ai.google.dev/gemini-api/docs/api-key
	2, Skim until you find the section, "Keep your API key secure"
	3. Read this thoroughly!!!!!
	4. See also
		https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety

*	Get your API key for Gemini
	1. Google search "Gemini API key"
	2. Select "Get your Gemini API key"
		- goes to https://aistudio.google.com/welcome
		- opens a black screen that says, 
			Google AI Studio
			"The fastest path from prompt to production with Gemini"
			
	3. clic "Get started"
	4. Select a Google Account
	5. Consent to Terms of Service
		- Opens the Google AI Studio home page
		
	6. In the left-hand column, open sub-menu under "DashboardÂ¨
	7. Clic on "API keys", opens a new window
	8. In the new window, clic on "+ Create API Key" in the upper right-hand corner
	9. Set up billing or use free tier
		Project number
		Project name
		API key
		Created
		Plan 			<== Set billing options or use free tier

*	Guard your API Key
	1. Store your API key in a .txt file
		- place the (.txt) file in a secure location on your home computer. 
		DONT STORE IN WORD OR ANY OTHER WORD PROCESSOR FILE!
		
	2. Store your API key as ENV VARIABLE in your computer [recommended]
		https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety
		https://gargankush.medium.com/storing-api-keys-as-environmental-variable-for-windows-linux-and-mac-and-accessing-it-through-974ba7c5109f
		


####################
Setup Instructions for 
Using OpenAI GPT Models
	Current SDK ==>  openai
##########################
https://platform.openai.com/docs/libraries#install-an-official-sdk
https://platform.openai.com/docs/overview
https://platform.openai.com/docs/quickstart

--- This section TBD ----------


###################
Setup/Configuration 
of Major Components
on Local Compu
(Windows, Linux/MacOS)
####################

>		<== indicates a Windows terminal
$		<== indicates a Linux/MacOS terminal


** Install Python ****
	- Follow the instruction in this website (Windows and MacOS)
		https://www.python.org/downloads/
		
		Stable Releases
		----------------
		sudo apt update &&								<== Linux
		sudo apt upgrade $$
		sudo aptitude install python3 python3-pip python3-dev python3-venv build-essential		
		
		
		Python 3.13.7 - Aug. 14, 2025
			Download macOS 64-bit universal2 installer		<== MacOS
			Download Windows installer (64-bit)			<== Windows
		


** Verify "pip" installed and updated ("pip" is a Python package manager) ****
	- pip should already be installed with Python 3.13.7
	- Open a terminal and go to the top of the filesystem
		> cd\
		> pip --version		<== Windows
		
		$ pip --version		<== Linux/MacOS
			(eg, pip 25.2 from /home/bmarron18/.local/lib/python3.10/site-packages/pip (python 
			3.10)
			
			
		./.local/lib/python3.10/site-packages/virtualenv
		./.local/lib/python3.10/site-packages/virtualenv-20.34.0.dist-info
			
	- If needed, follow the instructions in this website
		https://phoenixnap.com/kb/install-pip-windows
			
	- upgrade pip
		> python -m ensurepip --upgrade				<== Windows
	
		$ python3 -m pip install --upgrade pip			<== Linux/MacOS

	
	
** Install Spyder ****
	- Go to https://www.spyder-ide.org/
	- Spyder will automatically detect your OS and suggest a download
	- Let the installer decide where to install Spyder OR define a simple location.
	- For example
		/home/bmarron/spyder-6								<== Linux (install defined by user)
		C:\Users\<username>\AppData\Local\Programs\spyder-6		<== Windows


** Review Windows filesystem operations snippets ****
	- Open the file, "API_Installations_Windows-Basics.py" in Spyder-6
	- Review the information (snippets) in the large-window on the left-hand side
	- Start at [Command Line Operations in Windows] and scroll all the way through the document
	- Perform the command line exercises


** Find the version of Python running in Spyder-6 ****
	- Open the Spyder application if not already open
	- Locate the IPython Interpreter mini-window in the lower right-hand corner of Spyder-6
	- Scroll to the top of the mini-window to find the Python distribution (distro) information
		(eg Python 3.11.13 | packaged by conda-forge | (main, Jun  4 2025, 14:48:23) [GCC 13.3.0])
		
	

** Verify the Spyder installation ****
	- Open a terminal and go to your home directory
		> cd C:\Users\<your_user_name>\			<== Windows
		
		$ cd ~								<== Linux/MacOS
		
	
	- Check / find the Spyder installation directory (folder)
		> dir /b/s *spyder*						<== Windows
		> where spyder*
		
		$ find ./ -name "*spyder*" -type d			<== Linux/Mac OS
		



** Check that your python distro has the package, "virtualenv" ****
	- search (and pipe the output to a file on the Desktop)
		C:\> dir /b/s virtualenv.exe									<== Windows
			C:\Users\<you>\AppData\Local\spyder-6\...\virtualenv.exe

		$ sudo find ./ -name "*virtualenv*" -type d >> ~/Desktop/test.txt	<== Linux/MacOS
			(eg ./.local/lib/python3.10/site-packages/virtualenv
			./.local/lib/python3.10/site-packages/virtualenv
			./.local/lib/python3.10/site-packages/virtualenv-20.34.0.dist-info

** Install and verify the installation of "virtualenv" package into Spyder directories using pip
	(If you do not have it)

    - install "virtualenv" in specific location in Spyder
  		> cd C:\Users\<you>\AppData\Local\spyder-6\...		<== Windows
		> pip install virtualenv
	
		$ pip install --target ~/spyder-6/env/ virtualenv			<== Linux/MacOS


      - Verify installation
		> dir /b/s virtualenv.exe							<==Winows
			C:\Users\<you>\AppData\Local\spyder-6\...\virtualenv.exe
	 
		$ cd ~											<== Linux/MacOS
		$ find ./ -name "virtualenv*" -type f  
			./.local/lib/python3.10/site-packages/pip/_internal/utils/virtualenv.py
			./spyder-6/envs/ai-apis/lib/python3.11/site-packages/pip/_internal/utils/virtualenv.py


** Learn the fundamentals of virtual environments in python
	https://realpython.com/python-virtual-environments-a-primer/




################################################
Create
	(ai-apis)			<== a separate, virtual environment in python for handling the AI APIs

Install into (ai-apis)
	spyder-kernels 	<== tools to allow Spyder access to the virtual environment
	google-genai 		<== most recent SDK for Google Gemini models
	openai			<== most recent SDK for OpenAI models
	jiter			<== A standalone version of the JSON parser
	nltk 			<== Natural Language Toolkit
###################################################################

** Specify the use of python to create (ai-apis), a virtual environment) ****
	The virtual environment is created with the Python package, "virtualenv" using the command "venv"
	

										<== in Windows use python 3.13 in (ai-apis)
										<== NB. in (ai-apis) will see all python distros available on compu 
> C:\Users\<you>\AppData\Local\spyder-6\...\env\> python3.13 -m venv ai-apis



										<== in Linux use python 3.11-venv to create (ai-apis)
										<== in MacOS use python 3.13 to create (ai-apis)
										<== in (ai-apis) are all python distros available on compu 
											(eg python 3.10 and 3.11.orc1)
$ python3.11 -m venv ./spyder-6/envs/ai-apis




** Install special packages, Python packages and SDK packages into (ai-apis) virtual environment ****
	- Activate the (ai-apis) virtual environment
	  NB. When activated, you will see (ai-apis) at the command line

		C:\Users\<you>\AppData\Local\spyder-6\Scripts\ai-apis> activate		<== Windows
		(ai-apis)>

		$ source ./spyder-6/envs/ai-apis/bin/activate					<== Linux/MacOS
		(ai-apis):~$


	- Install packages
		(ai-apis)> pip install spyder-kernels google-genai openai nltk jiter			<== Windows

		(ai-apis):~$ pip install spyder-kernels google-genai openai nltk jiter		<== Linux/MacOS


	- close the (ai-apis) virtual environment
		(ai-apis)> deactivate 												<== Windows
		>
		
		(ai-apis):~$ deactivate 												<== Linux/MacOS
		$

#############
Set Spyder 
to run in (ai-apis)
##############

https://docs.spyder-ide.org/5/faq.html#using-existing-environment
	Q. How do I get SPyder to work with my existing pkgs/env?

To work with an existing environment in Spyder, change the default Python interpreter for new IPython Consoles to point to this environment.
To do so, open the Python interpreter section of Spyder’s preferences (Tools ? Preferences, or Spyder ? Preferences on macOS). Here, select the option Use the following Python interpreter, and use the dropdown below to select your preferred environment. If it’s not listed, see the note below.
	


** open Spyder and clic on the "wrench" in the toolbar to open the Preferences window ****
	- in left-hand column clic on "Python Interpreter"
	- in the right-hand window clic on the button "Use the following interpreter:"
		-- in the empty box search your compu directory until you find the (ai-apis) directory
			(eg .../spyder-6/envs/ai-apis)
		-- open this directory and find the /bin (\bin) directory
		-- open the "bin" directory and select
			the "python3.13" icon	<== Windows/MacOS
			the "python3.11" icon	<== Linux
		-- at the bottom of the window clic 'Apply' and then 'OK
		-- close the "Preferences" window

	- back in the Spyder main windows, find the IPython interpreter window (bottom right)
		-- find the tab that says, "Console 1/a"
		-- close the tab by clicking on the "X"
		-- Spyder will try to re-start Python using
			"Python 3.13.7"	<== Windows/MacOS
			"Python 3.11.0rc1" 	<== Linux

** Verify Spyder is operating in (ai-apis) ****
	- if all good, you will see a green-colored "In [1]" in the IPython interpreter window (bottom right)
	- if an Error Box appears in the interpreter window something went wrong (try closing and re-opening Spyder)


##########
Run API scripts
in Spyder
###########
	
** You are now ready to access the APIs! ****
	- in Spyder under the "File" tab find the Python script of interest (a .py file) and open it
		Gemini_APITranslation_pdf-files.py
		Gemini_APITranslation_text-files.py
		OpenAI_APITranslation_pdf-files.py
		
	- modify the prompts and run the blocks/cells of interest



#################
Notes on
Prompt Engineering
##################

*	You could think about developer and user messages like a function and its arguments in a programming language.
    	-developer messages provide the system's rules and business logic, like a function definition.
    	-user messages provide inputs and configuration to which the developer message instructions are applied, like 
		arguments to a function.
		- a prompt contains BOTH message types

	instructions parameter (developer messages)
		gives the model high-level instructions on how it should behave while generating a response, including tone, 
		goals, and examples of correct responses. Any instructions provided this way will take priority over a prompt 
		in the input parameter.
		
	input parameters (user messages; as string or array)
		Ant text, image, or file inputs to the model that are used to generate a specific response.


##################
Sample Gemini Prompts
and System Instructions
################

--- User Prompts ------------------------------
	# User level message
prompt = "Translate the document, processedfile (a .pdf file in English) to standard, natural, \
    fluent Spanish. Maintain all specific formatting (line breaks, indents, spaces, paragraphs). \
	Generate the output as MIME_Type = text/x-tex. That is. the output translation should be formated as \
	a .tex file ready to open in LaTex."
	
prompt = "Translate the document, processedfile (a .pdf file in English) to standard, natural, \
    fluent Spanish. Maintain all specific formatting (line breaks, indents, spaces, paragraphs). \
	Generate the output as MIME type= text/plain. That is, generate the output as a plain text file (.txt)."


prompt = "Translate the document, processedfile (a .txt file in English) to standard, natural, \
    fluent Spanish. Maintain all specific formatting (line breaks, indents, spaces, paragraphs, quotation marks). \
	Generate the output as a plain text file (.txt); that is, as MIME_type= text/plain."



--- System Instruction Prompts ------------------------------------------
	# Developer level message
config = types.GenerateContentConfig(
               system_instruction="You are an expert liguist \
                   specializing in translation. Maintain the original \
                   meaning, and tone of the original. Provide ONLY the \
                   requested translation without any additional commentary, \
                   introductory phrases, other language translations, or \
                   conversational remarks."),




##################
Sample OpenAI 
User Prompts and
System Prompts
################

--- User Prompts ------------------------------
	# User level messages
	
user_prompt= "Translate the file (a .pdf file in English) to standard, natural, \
    and fluent Spanish. Maintain all specific formatting (line breaks, \
    indents, spaces, paragraphs, and quotations). Generate the output as \
    MIME type= text/plain. That is, generate the output as a plain text \
    file (.txt)."



--- System Prompts ------------------------------------------
	# Developer level messages
	
sys_prompt = "You are an expert liguist \
    specializing in translation. Maintain the original \
    meaning and tone. Provide ONLY the requested translation without \
    any additional commentary, introductory phrases, other language \
    translations or conversational remarks."
