
Login
	https://auth.openai.com/log-in


####################
OpenAI has 
	Responses API		<== most advanced interface for generating model responses as of 09/20/2025
	Chat Completions API
########################

https://platform.openai.com/docs/quickstart
https://cookbook.openai.com

https://platform.openai.com/docs/api-reference/responses

https://platform.openai.com/docs/api-reference/responses/create
https://platform.openai.com/docs/guides/migrate-to-responses
https://platform.openai.com/docs/guides/pdf-files?api-mode=responses

https://community.openai.com/t/translation-script-not-working/896719/2
https://platform.openai.com/docs/api-reference/chat/create?lang=python


https://transcy.crisp.help/en/article/how-to-use-openai-translation-vni6lx/

Voice Translation into Different Languages
cookbook.openai.com/examples/voice_solutions/voice_translation_into_different_languages_using_gpt-4o


########
Pricing
########
https://platform.openai.com/docs/guides/rate-limits
https://platform.openai.com/settings/organization/billing/overview

Supported countries and territories
Countries and territories that currently support access to our API services.
Mexico!!

Tier	Qualification											Usage limits
Free	User must be in an allowed geography					$100 / month
*Tier 1	$5 paid													$100 / month
Tier 2	$50 paid and 7+ days since first successful payment		$500 / month
Tier 3	$100 paid and 7+ days since first successful payment	$1,000 / month
Tier 4	$250 paid and 14+ days since first successful payment	$5,000 / month
Tier 5	$1,000 paid and 30+ days since first successful payment	$200,000 / month

My Costs
https://platform.openai.com/usage


############
API Key
############
 # Manage API Key
https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety
# NB. shell configuration files ( .bashrc, .zshrc, or .bash_profile)
# I have ~/.bashrc

    # in Linux creates a .bash_profile file at /home/bmarron
$ echo "export GEMINI_API_KEY='my-key'" >> ~/.bashrc
$ echo "export OPENAI_API_KEY='my-key'" >> ~/.bashrc

    # update shell with new variable
$ source ~/.bashrc

    # check  ~/.bashrc file
    # should have ==> export OPENAI_API_KEY="sk-proj-xxxxxxxxxx" as \ 
    # the last entry
    
$ notepadqq ./.bashrc

    # confirm you have set the API key correctly
$ echo $OPENAI_API_KEY

    # check Python finds the key
    # DONT USE ==> os.environment["OPENAI_API_KEY"]

import os
openai_api_key = os.getenv("OPENAI_API_KEY")


    # call the key in scripts
import os
from openai import OpenAI

openai_api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=openai_api_key)


--- ./bashrc --------------------------------------------------
# >>> Added by Spyder >>>
alias spyder=/home/bmarron/.local/spyder-6/envs/spyder-runtime/bin/spyder
alias uninstall-spyder=/home/bmarron/.local/spyder-6/uninstall-spyder.sh
# <<< Added by Spyder <<<


# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/bmarron/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/bmarron/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/bmarron/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/bmarron/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

export OPENAI_API_KEY="sk-proj-L8VWXMFYMPxxxxxxxxxx"
------------------------------------------------------------------------------


#############
Vector Stores
###############
https://platform.openai.com/docs/api-reference/vector-stores

Vector stores power semantic search for the Retrieval API and the file_search tool in the Responses and Assistants APIs. A vector store is a collection of processed files can be used by the file_search tool.


###########
Notes
##########
*	reasoning models perform better and demonstrate higher intelligence when used with the Responses API. If you're building any text generation app, we recommend using the Responses API over the older Chat Completions API. 


*	Only models that support both text and image inputs, such as gpt-4o, gpt-4o-mini, or o1, can accept PDF files as input o/w need to upload files to the Vector Storage Library

You can upload multiple files, each less than 10 MB. The total content limit across all files in a single API request is 32 MB.



##########
Code
########

*	Chat Completion API usage
>>> python ------------------------------------------
from openai import OpenAI
client = OpenAI(API_KEY)

completion = client.chat.completions.create(		<== Chat Completion API
  model="gpt-5",
  messages=[
    {"role": "developer", "content": "You are a helpful assistant."},
    {"role": "user", "content": "Hello!"}
  ]
)

print(completion.choices[0].message)
-----------------------------------------------------------------




*	Response API usage	
>>> python ------------------------------------------
from openai import OpenAI
client = OpenAI(API_KEY)

response = client.responses.create(				<== Responses API
  model="gpt-5",
  reasoning={"effort": "low"}
  temperature=1.3
  instructions="Talk like a pirate.",
  input="Write a one-sentence bedtime story about a unicorn."
)

print(response.output_text)
-----------------------------------------------------------------




Response API usage		<== BUILD ON THIS for .pdf (only .pdf allowed!!
>>> python ------------------------------------------
from openai import OpenAI
client = OpenAI(API_KEY)

	# Upload a .pdf / .txt referenced in input = []
file = client.files.create(
    file=open("draconomicon.pdf", "rb"),
    purpose="user_data",
)

	# Developer level
sys_prompt = “You are a linguistics expert specializing in translations. Do not provide additional commentary. Just perform the task at hand.”

	# User level
user_prompt= “Translate the uploaded file to standard Dutch:”



	# API call
response = client.responses.create(
    model="gpt-5",
	reasoning={"effort": "low"}
    temperature=1.3
    instructions= sys_prompt,
    input=[
        {
            "role": "user",
            "content": [
                {
                    "type": "input_file",
                    "file_id": file.id,
                },
                {
                    "type": "input_text",
                    "text": user_prompt,
                },
            ]
        }
    ]
)

	# API output
print(response.output_text)


#############
Deprecated
Code
###########
>>> python -----------------------------
from openai import OpenAI
cli = OpenAI(api_key=api_key)

sys_prompt: “You are a linguistics expert specializing in translations. Do not provide additional commentary. Just perform the task at hand. Leave web URLs as is.”

user_prompt: “Convert the following statements to standard Dutch:”

resp = cli.chat.completions.create(				<== deprecated
    model='gpt-4.1',
    temperature=0,
    messages=[
        {'role': 'system', 'content': sys_prompt},
        {'role': 'user', 'content': user_prompt},
    ]
)

 resp = openai.ChatCompletion.create(			<== deprecated
          model = "gpt-3.5-turbo",
          messages=[{"role": "user", "content": wText}],
          request_timeout = 60, 
          temperature = 0.5,
        )
-----------------------------------------------------------------------		