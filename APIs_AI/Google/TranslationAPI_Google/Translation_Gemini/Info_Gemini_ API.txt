
Login
	https://auth.openai.com/log-in


####################
Google has 
	Gemini 2.5 Flash
	
##########################

Gemini API Coding Guidelines (Python)
https://github.com/googleapis/python-genai/blob/main/codegen_instructions.md

Document understanding (Gemini)
https://ai.google.dev/gemini-api/docs/document-processing

HTML-to-pdf
https://stackoverflow.com/questions/23359083/how-to-convert-webpage-into-pdf-by-using-python



Google search
    types.GenerateContentConfig in the Gemini API 


###################
Doc MIME Types 
##################
The most comprehensive list of MIME types is maintained by the 
Internet Assigned Numbers Authority (IANA). 


Text:
    text/plain: Plain text files (.txt) 
    text/csv: Comma-separated values files (.csv) 
    text/html: HyperText Markup Language files (.html, .htm)
    text/x-tex: Various common LaTex files (.tex, .cls, .sty)

Image:
    image/jpeg: JPEG image files (.jpeg, .jpg) 
    image/png: Portable Network Graphics files (.png) 
    image/gif: Graphics Interchange Format files (.gif) 
    image/svg+xml: Scalable Vector Graphics files (.svg) 

Audio:
    audio/mpeg: MPEG audio files (.mp3) 

Video:
    video/mp4: MP4 video files (.mp4) 
    video/webm: WebM video files (.webm) 

Application:
    application/pdf: Portable Document Format files (.pdf) 
    application/json: JavaScript Object Notation files (.json) 
    application/zip: ZIP compressed archive files (.zip) 
    application/octet-stream: A general-purpose type for unspecified binary data 
1*    application/vnd.openxmlformats-officedocument.wordprocessingml.document (.docx)


1* Gemini gave me a .json file when this mime type was requested






########
Pricing
########


############
API Key
############
 # Manage API Keys
https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety

# NB. shell configuration files ( .bashrc, .zshrc, or .bash_profile)
	==> I have ~/.bashrc

    1. write key in .bashrc file at /home/bmarron
$ echo "export GEMINI_API_KEY='my-key'" >> ~/.bashrc

    2. update shell with new variable
$ source ~/.bashrc

    3. check  ~/.bashrc file
    [should have ==> export GEMINI_API_KEY="AIzaSxxxxxx" as the last entry]
    
$ notepadqq ./.bashrc

    4. confirm you have set the API key correctly
$ echo $GEMINI_API_KEY

    5. Re-start Spyder and check that Python finds the key
import os
gemini_api_key = os.getenv("GEMINI_API_KEY")


    6. call the key in scripts
import os
from google import genai

gemini_api_key = os.getenv("GEMINI_API_KEY")
client = genai.Client(api_key=gemini_api_key) 





#############
Uploading files
###############

	# watch file name for uploaded INPUT_FILE 
        # ==> strictly alpha! 
        # ==> NO dashes or underline (won't upload to Gemini)

   # watch file name for INPUT_FILE
        # ==> strictly alpha! 
        # ==> NO dashes or underline (or won't upload to Gemini)

--- python -------------------------------------------------
#--- Read and process file to be translated (file UPLOADED) ---
>>>
uploadedfile = client.files.upload(
    file=input_filepath,
    config=dict(mime_type='text/plain')
    )
<<<
----------------------------------------

###########
Notes
##########
*	from google.genai import types	<== various methods 
	types handles


*	You could think about developer and user messages like a function and its arguments in a programming language.
    	-developer messages provide the system's rules and business logic, like a function definition.
    	-user messages provide inputs and configuration to which the developer message instructions are applied, like 
		arguments to a function.
		- a prompt contains BOTH message types

	instructions parameter (developer messages)
		gives the model high-level instructions on how it should behave while generating a response, including tone, 
		goals, and examples of correct responses. Any instructions provided this way will take priority over a prompt 
		in the input parameter.
		
	input parameter (user messages; as string or array)
		Text, image, or file inputs to the model, used to generate a response.






##########
Code
########

*	Prompts 

----   Explanation of the Gemini Prompt ------------

This is the most critical part for getting good results. 
We are telling Gemini:

**Role-playing:
    "You are an expert linguist..." This helps the model adopt 
    the right persona.

**Clear Task:
    "Translate the following English text into natural, fluent 
    Spanish."

**Key Instructions:
    "Maintain the original meaning, tone, and any specific 
    formatting..." (Crucial for text files).
    
    "Provide ONLY the Spanish translation, without any additional
    commentary..." (Prevents the model from adding things like 
    "Here is your translation:" or "I have translated the text 
    for you.").


'''