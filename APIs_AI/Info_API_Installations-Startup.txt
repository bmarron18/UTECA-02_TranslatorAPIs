Title:			Setup instructions for using Google Gemini API 
Project Desc.:		UTECA Interpretacion y Traduccion 	
Author:			bmarron
Origin Date:		22 Sept 2025
Revision Date:		24 Sept 2025


%%%%%%%%%%%%%%%%%%	Instructions for Using Google and OpenAI APIs %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#########################
Setup for Google Gemini
##########################

----- Google Gemini API Info and Getting Started ---------------------------
1. See the QuickStart guide
	- QuickStart 
		https://ai.google.dev/gemini-api/docs/quickstart?lang=python]

2. Go to Google API Studio Welcome page
	https://aistudio.google.com/welcome
		- clic on "Get Started"
		- Enter a Google Account
		- opens Google AI Studio page
	
---- Get a Gemini API Key ----------------
*	Secuirty for your API key
	1. Open 
		https://ai.google.dev/gemini-api/docs/api-key
	2, Skim until you find the section, "Keep your API key secure"
	3. Read this thoroughly!!!!!
	4. See also
		https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety

*	Get your API key for Gemini
	1. Google search "Gemini API key"
	2. Select "Get your Gemini API key"
		- goes to https://aistudio.google.com/welcome
		- opens a black screen that says, 
			Google AI Studio
			"The fastest path from prompt to production with Gemini"
			
	3. clic "Get started"
	4. Select a Google Account
	5. Consent to Terms of Service
		- Opens the Google AI Studio home page
		
	6. In the left-hand column, open sub-menu under "DashboardÂ¨
	7. Clic on "API keys", opens a new window
	8. In the new window, clic on "+ Create API Key" in the upper right-hand corner
	9. Set up billing or use free tier
		Project number
		Project name
		API key
		Created
		Plan 			<== Set billing options or use free tier

*	Guard your API Key
	1. Store your API key in a .txt file
		- place the (.txt) file in a secure location on your home computer. 
		DONT STORE IN WORD OR ANY OTHER WORD PROCESSOR FILE!
		
	2. Store your API key as ENV VARIABLE in your computer [recommended]
		https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety
		
--- Example in Linux --------------------------------------------------------
	# shell configuration files include  .bashrc, .zshrc, or .bash_profile
	# My Linux has a ~/.bashrc file
	
	a. export the API Key to  a .bashrc
$ echo "export GEMINI_API_KEY='key'" >> ~/.bashrc
$ echo "export OPENAI_API_KEY='key'" >> ~/.bashrc

    b. update shell with new variable
$ source ~/.bashrc

    c. check  ~/.bashrc file
    c1. should have entries at the bottom of the file
    		==> export GEMINI_API_KEY="sk-proj-xxxxxxxxxx..."
		==> export OPENAI_API_KEY="AIzaSxxxxxxxx..."     
$ notepadqq ./.bashrc

    d. confirm you have set the API key correctly
$ echo $GEMINI_API_KEY
$ echo $OPENAI_API_KEY

    e. check that Python finds the key

>>> import os
>>> gemini_api_key = os.getenv("GEMINI_API_KEY")
>>> openai_api_key = os.getenv("OPENAI_API_KEY")

>>> print(gemini_api_key)
>>> print(openai_api_key)


------- install Gemini SDK (outside of Anaconda) --------------------------------------------------------
pip install google-genai


####################
Setup Instructions for 
Using OpenAI GPT Models
##########################

https://platform.openai.com/docs/libraries#install-an-official-sdk


https://platform.openai.com/docs/overview
https://platform.openai.com/docs/quickstart

####################
Setup Instructions for 
Python (Spyder)
##########################


Install spyder 6
Spyder-Linux-x86_64.sh
	/home/bmarron18/spyder-6

pip install --target /home/bmarron18/virtualenv virtualenv



WARNING: The script virtualenv is installed in '/home/bmarron18/.local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.





---- Install and Configure Anaconda (installs Python, Spypder, and MANY packages) ----------------
	1. Download the Anaconda distribution for Python to your home computer.
		https://www.anaconda.com/download

	2. Open a terminal
		- use the default terminal in Linux/Mac OS. The terminal is a flashing cursor after a money sign ($)
		(for example, bmarron@bmarron-HP-Laptop-15t-dy100:~$ )
		
		- use a regular terminal (NOT Power Shell terminal) in Windows. Click the Start menu and type "cmd" in the 	
		search bar to find the Command Prompt. The terminal is a flashing cursor after alligator symbol (>) 
		(for example, C:\Users\bmarron\> 
		
		NB. These instructions will show examples in a Linux terminal
		
	3. Open a terminal, and update all Anaconda packages
		$ conda update --all
	
	4. Open a terminal, check Anaconda distro installation, and get ALL the current details
	of the Anaconda distro
		$ conda info 						
	
	5. Open a terminal and check available Anaconda working environments
		$ conda info --envs
		
	6. Open a terminal and activate / deactivate the Anaconda (base) environment (Note change at cursor)
		$ conda activate base
		(base) $ 
		(base) $ conda deactivate
	
	7. Open a terminal, avtivate the (base) working environment and install required 
	SDK packages for the APIs 
		$ conda activate base
		(base) $ conda install conda-forge::openai		
		(base) $ conda install conda-forge::google-generativeai
		(base) $ conda deactivate
		
	
	8. You are now ready to access the API!
		- deactive all Anaconda work envs and close everything
		- open a new terminal, set the Anaconda working env to (base) and open Spyder at the coomand line
		- In Spyder find the Python script ofinterest (a .py file) and open it
		- modify the prompts and run the blocks/cells of interest

#################
Notes on prompts
##################

*	You could think about developer and user messages like a function and its arguments in a programming language.
    	-developer messages provide the system's rules and business logic, like a function definition.
    	-user messages provide inputs and configuration to which the developer message instructions are applied, like 
		arguments to a function.
		- a prompt contains BOTH message types

	instructions parameter (developer messages)
		gives the model high-level instructions on how it should behave while generating a response, including tone, 
		goals, and examples of correct responses. Any instructions provided this way will take priority over a prompt 
		in the input parameter.
		
	input parameter (user messages; as string or array)
		Ant text, image, or file inputs to the model that are used to generate a specific response.





############
Issues
##########
**	Cant load google-genai or openai SDKs
PackagesNotFoundError: The following packages are not available from current channels:
	- google-genai
Current channels:
	- defaults
	
	ANSWER: Install API keys and save as "GEMINI_API_KEY"ENV VARIABLES


** Spyder not opening in spyder_env
Spyder is only available by default in your base . For any other environments you have open in Navigator or your CLI, you may need to install Spyder in that environment.

	ANSWER: Install Spyder separately but needs a python distro!!
	

** (base) $ conda install google-genai 		<== wont work; need Anaconda version
   (base) $ conda install openai 			<== wont work; need Anaconda version
   
   
   $ sudo aptitude install python3-pip
   $ pip install google-genai 	<== install outside of ANaconda
   $ pip install openai 			<== install outside of Anaconda
   
  WARNING: The script tqdm is installed in '/home/bmarron18/.local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.
  
  WARNING: The script openai is installed in '/home/bmarron18/.local/bin' which is not on PATH.
  Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.

   $ export PATH=/home/name/.local/bin:$PATH
   $ source ~/.bashrc

$ export GOOGLE-GENAI="${GOOGLE-GENAI}:/home/bmarron18/.local/bin"
$ source ~/.bashrc



export PYTHONPATH="${PYTHONPATH}:/Users/caio.hc.oliveira/Library/Python/3.7/bin"
###########
IFF Spyder installed outside
of Anaconda
#######################
7. Open a terminal and create a new Anaconda environment to run AI scripts w/o affecting Anaconda 
	or your computer. The new working environment is named, "spyder_env".
		$ conda create --name spyder_env
		
	8. Open a terminal and check available Anaconda working environments
		$ conda info --envs
		
		For example, you should see something like this
		# conda environments:
		#
		base                   /home/bmarron/anaconda3
		spyder_env             /home/bmarron/anaconda3/envs/spyder_env


2. Open a terminal, and open Spyder at the command line
		$ conda activate spyder_env
		(spyder_env) $ spyder
		
	3. Now in Spyder, in the lower right-hand corner find the IPython Console window
		- Check the version of Python that is running
		- This will be Spyder's internal Python version
		
		(for example,
			Python 3.13.7 | packaged by conda-forge | (main, Sep  3 2025, 14:30:35) [GCC 14.3.0]
			Type "copyright", "credits" or "license" for more information.
			IPython 8.37.0 -- An enhanced Interactive Python. Type '?' for help.
		)
		
	4. Set Spyder to use Python in the new (spyder_env) working environment
		- Clic on Spyder under "wrench" change Python interpreter
		- Opens a new window
		- in left-hand column clic on "Python Interpreter"
		- in the right-hand window clic on the button "Use the following interpreter:"
		- in the empty box search your compu directory until you find the (spyder_env) directory
			(for example, /home/bmarron/anaconda3/envs/spyder_env
		- open this directory and find the /bin (\bin) directory
		- open the "bin" directory and select one of the Python program executable icons
			(for example, /home/bmarron/anaconda3/envs/spyder_env/bin/python)
		- at the bottom of the window clic 'Apply' and then 'OK'
		- close Spyder
		- at the terminal close the (spyder_env) working environment
			(spyder_env) $ conda deactivate
		
	5. Open a new terminal, activate the (base) working environment, check the Python version, and deactivate
		$ conda activate base
		(base)$ python --version
			(for example,
				3.13.5
			)
		(base) $ conda deactivate
		
	6. Open a new terminal, activate the (spyder_env), check the Python version, and open Spyder
		$ conda activate spyder_env
		(spyder_env) $ python --version
			(for example,
				3.13.7
			)
		(spyder_env) $ spyder
		
	7. Now in Spyder, in the lower right-hand corner find the IPython Console window
		- Check the version of Python that is now running
		- This should be the same Anaconda's Python version installed in (spyder_env) but
		  different from Spyder's internal Python version
		7. Open a terminal and create a new Anaconda environment to run AI scripts w/o affecting Anaconda 
	or your computer. The new working environment is named, "spyder_env".
		$ conda create --name spyder_env
		
	8. Open a terminal and check available Anaconda working environments
		$ conda info --envs
		
		For example, you should see something like this
		# conda environments:
		#
		base                   /home/bmarron/anaconda3
		spyder_env             /home/bmarron/anaconda3/envs/spyder_env