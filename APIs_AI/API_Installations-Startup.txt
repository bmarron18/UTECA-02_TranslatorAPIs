Title:			Setup instructions for using Google Gemini API 
Project Desc.:		UTECA Interpretacion y Traduccion 	
Author:			bmarron
Origin Date:		22 Sept 2025
Revision Date:		26 Sept 2025


%%%%%%%%%%%%%%%%%%	Instructions for Using Google and OpenAI APIs %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#########################
Setup for Google Gemini
[Current SDK ==>  google-genai]
##########################

----- Google Gemini API Info and Getting Started ---------------------------
1. See the QuickStart guide
	- QuickStart 
		https://ai.google.dev/gemini-api/docs/quickstart?lang=python]

2. Go to Google API Studio Welcome page
	https://aistudio.google.com/welcome
		- clic on "Get Started"
		- Enter a Google Account
		- opens Google AI Studio page
	
---- Get a Gemini API Key ----------------
*	Secuirty for your API key
	1. Open 
		https://ai.google.dev/gemini-api/docs/api-key
	2, Skim until you find the section, "Keep your API key secure"
	3. Read this thoroughly!!!!!
	4. See also
		https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety

*	Get your API key for Gemini
	1. Google search "Gemini API key"
	2. Select "Get your Gemini API key"
		- goes to https://aistudio.google.com/welcome
		- opens a black screen that says, 
			Google AI Studio
			"The fastest path from prompt to production with Gemini"
			
	3. clic "Get started"
	4. Select a Google Account
	5. Consent to Terms of Service
		- Opens the Google AI Studio home page
		
	6. In the left-hand column, open sub-menu under "DashboardÂ¨
	7. Clic on "API keys", opens a new window
	8. In the new window, clic on "+ Create API Key" in the upper right-hand corner
	9. Set up billing or use free tier
		Project number
		Project name
		API key
		Created
		Plan 			<== Set billing options or use free tier

*	Guard your API Key
	1. Store your API key in a .txt file
		- place the (.txt) file in a secure location on your home computer. 
		DONT STORE IN WORD OR ANY OTHER WORD PROCESSOR FILE!
		
	2. Store your API key as ENV VARIABLE in your computer [recommended]
		https://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety
		
--- Example in Linux --------------------------------------------------------
	# shell configuration files include  .bashrc, .zshrc, or .bash_profile
	# My Linux has a ~/.bashrc file
	
	a. export the API Key to  a .bashrc
$ echo "export GEMINI_API_KEY='key'" >> ~/.bashrc
$ echo "export OPENAI_API_KEY='key'" >> ~/.bashrc

    b. update shell with new variable
$ source ~/.bashrc

    c. check  ~/.bashrc file
    c1. should have entries at the bottom of the file
    		==> export GEMINI_API_KEY="sk-proj-xxxxxxxxxx..."
		==> export OPENAI_API_KEY="AIzaSxxxxxxxx..."     
$ notepadqq ./.bashrc

    d. confirm you have set the API key correctly
$ echo $GEMINI_API_KEY
$ echo $OPENAI_API_KEY

    e. check that Python finds the key

>>> import os
>>> gemini_api_key = os.getenv("GEMINI_API_KEY")
>>> openai_api_key = os.getenv("OPENAI_API_KEY")

>>> print(gemini_api_key)
>>> print(openai_api_key)
-------------------------------------------------------------------------




####################
Setup Instructions for 
Using OpenAI GPT Models
[Current SDK ==>  openai]
##########################

https://platform.openai.com/docs/libraries#install-an-official-sdk


https://platform.openai.com/docs/overview
https://platform.openai.com/docs/quickstart

####################
Setup Instructions for 
Spyder (Python)
[Spyder comes with its own Python]
##########################

	# install Spyder in a simple location

	Spyder will now be installed into this location:
		/home/bmarron/spyder-6
		PREFIX=/home/bmarron18/spyder-6



############
Install SDKs 
and Python pkgs
[nltk ==> Natural Language Toolkit
[jiter ==> A standalone version of the JSON parser. use this package directly if you do not use pydantic.]
###################
--- Command Line

$ python3 -m pip install --upgrade pip

$ pip install --target /home/bmarron18/virtualenv virtualenv

$ sudo aptitude install python3.11-venv			<== install a python versionvenv pkg, to work with python 3.11
										python3.11-venv_3.11.0~rc1-1~22.04_amd64.deb
										The first release candidate of Python 3.11.orc1

$ python3.11 -m venv ./spyder-6/envs/ai-apis		<== using python 3.11 to create venv named ai-apis
										./home/bmarron18/spyder-6/envs/ai-apis/pyvenv.cfg
										<== in ai-apis is python 3.10 and 3.11.orc1
										
										

$ source ./spyder-6/envs/ai-apis/bin/activate

(ai-apis) bmarron18@bmarron18-HP-Notebook:~$ pip install spyder-kernels google-genai openai nltk jiter

(ai-apis) bmarron18@bmarron18-HP-Notebook:~$ deactivate 

	open Spyder and change to "wrench" to ai-apis [/home/bmarron18/spyder-6/envs/ai-apis/bin/python3.11]
	close and reopen spyder (or close Interpreter)
	run AI scripts
	if desired, reset "wrench" to run Spyder outside of virtual env
	close spyder
	



This runs Python 3.11.0rc1 in spyder
This is the first release candidate of Python 3.11
	
	8. You are now ready to access the API!
		- deactive all Anaconda work envs and close everything
		- open a new terminal, set the Anaconda working env to (base) and open Spyder at the coomand line
		- In Spyder find the Python script ofinterest (a .py file) and open it
		- modify the prompts and run the blocks/cells of interest

#################
Notes on prompts
##################

*	You could think about developer and user messages like a function and its arguments in a programming language.
    	-developer messages provide the system's rules and business logic, like a function definition.
    	-user messages provide inputs and configuration to which the developer message instructions are applied, like 
		arguments to a function.
		- a prompt contains BOTH message types

	instructions parameter (developer messages)
		gives the model high-level instructions on how it should behave while generating a response, including tone, 
		goals, and examples of correct responses. Any instructions provided this way will take priority over a prompt 
		in the input parameter.
		
	input parameter (user messages; as string or array)
		Ant text, image, or file inputs to the model that are used to generate a specific response.




